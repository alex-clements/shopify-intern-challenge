{"ast":null,"code":"export default function fetchDataAbstract(apiString) {\n  console.log(\"Fetching data from: \", apiString);\n  let newAPIString = \"https://api.nasa.gov/planetary/apod?api_key=\" + process.env.REACT_APP_API_KEY + \"&test\";\n  console.log(newAPIString);\n  return fetch(apiString).then(response => {\n    if (response.ok) {\n      console.log(\"Rate Limit Remaining: \", response.headers.get(\"X-RateLimit-Remaining\"));\n      return response.json();\n    } else {\n      throw new Error(\"Data fetch failed.\");\n    }\n  }).then(data => {\n    return data;\n  }).catch(error => {\n    console.log(error);\n    return [];\n  });\n}","map":{"version":3,"sources":["/Users/alexanderclements/Projects/spacestagram/src/scripts/fetchDataAbstract.tsx"],"names":["fetchDataAbstract","apiString","console","log","newAPIString","process","env","REACT_APP_API_KEY","fetch","then","response","ok","headers","get","json","Error","data","catch","error"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CAA2BC,SAA3B,EAA+C;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,SAApC;AACA,MAAIG,YAAqB,GAAG,iDAAiDC,OAAO,CAACC,GAAR,CAAYC,iBAA7D,GAAiF,OAA7G;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,SAAOI,KAAK,CAACP,SAAD,CAAL,CACFQ,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCO,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,uBAArB,CAAtC;AACA,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KAHD,MAGO;AACH,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;AACJ,GARE,EASFN,IATE,CASGO,IAAI,IAAI;AACV,WAAOA,IAAP;AACH,GAXE,EAYFC,KAZE,CAYKC,KAAD,IAAW;AACdhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACA,WAAO,EAAP;AACH,GAfE,CAAP;AAgBH","sourcesContent":["export default function fetchDataAbstract(apiString : string) {\n    console.log(\"Fetching data from: \", apiString);\n    let newAPIString : string = \"https://api.nasa.gov/planetary/apod?api_key=\" + process.env.REACT_APP_API_KEY + \"&test\";\n    console.log(newAPIString);\n    return fetch(apiString)\n        .then(response => {\n            if (response.ok) {\n                console.log(\"Rate Limit Remaining: \", response.headers.get(\"X-RateLimit-Remaining\"));\n                return response.json();\n            } else {\n                throw new Error(\"Data fetch failed.\");\n            }\n        })\n        .then(data => {\n            return data;\n        })\n        .catch((error) => {\n            console.log(error);\n            return [];\n        })\n}"]},"metadata":{},"sourceType":"module"}