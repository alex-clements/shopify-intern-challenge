{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderclements/Projects/spacestagram/src/functionalComponents/ApplicationBody.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport ImageCard from './ImageCard';\nimport getStorageItems from '../scripts/getStorageItems';\nimport fetchDataAbstract from '../scripts/fetchDataAbstract';\nimport { HelperFunctions } from '../scripts/HelperFunctions';\nimport CustomProgress from './CustomProgress';\nimport fetchSavedData from '../scripts/fetchSavedData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApplicationBody(props) {\n  _s();\n\n  let helper_functions = new HelperFunctions();\n  const [imageData, setImageData] = useState([]);\n  const [imageDataLoaded, setImageDataLoaded] = useState(false);\n  const [viewMode, setViewMode] = useState(props.viewMode);\n  const [nextAvailableDate, setNextAvailableDate] = useState(new Date().toString());\n  const [currentSavedIndex, setCurrentSavedIndex] = useState(0);\n  const [savedImageDates, setSavedImageDates] = useState(getStorageItems());\n  useEffect(() => {\n    switch (viewMode) {\n      case \"random\":\n        {\n          fetchImageDataRandom();\n          break;\n        }\n\n      case \"chronological\":\n        {\n          fetchImageDataChron();\n          break;\n        }\n\n      case \"saved\":\n        {\n          fetchImageDataSaved();\n          break;\n        }\n    }\n  }, []);\n  useEffect(() => {\n    if (props.loadMoreData) {\n      switch (viewMode) {\n        case \"random\":\n          {\n            fetchAdditionalDataRandom();\n            break;\n          }\n\n        case \"chronological\":\n          {\n            fetchAdditionalDataChron();\n            break;\n          }\n\n        case \"saved\":\n          {\n            fetchAdditionalSavedImage();\n          }\n      }\n    }\n  }, [props.loadMoreData]);\n  useEffect(() => {\n    setViewMode(props.viewMode);\n  }, [props.viewMode]);\n\n  const fetchImageDataSaved = () => {\n    let allDates = savedImageDates;\n    let index = currentSavedIndex;\n    let allDatesLength = allDates.length;\n    let myArray = [];\n    var i;\n\n    for (i = index; i < index + 5; i++) {\n      if (i < allDatesLength) {\n        myArray.push(allDates[i]);\n      }\n    }\n\n    fetchSavedData(myArray).then(data => savedImageDataHandler(data)).then(() => {\n      if (i >= allDates.length) {\n        props.onNoMoreData();\n      }\n    });\n    setCurrentSavedIndex(index + 5);\n  };\n\n  const fetchAdditionalSavedImage = () => {\n    let allDates = savedImageDates;\n    let index = currentSavedIndex;\n    let allDatesLength = allDates.length;\n    let myArray = [];\n    var i;\n\n    for (i = index; i < index + 5; i++) {\n      if (i < allDatesLength) {\n        myArray.push(allDates[i]);\n      }\n    }\n\n    fetchSavedData(myArray).then(data => additionalImageDataHandler(data)).then(() => {\n      if (i >= allDates.length) {\n        props.onNoMoreData();\n      }\n    });\n    setCurrentSavedIndex(index + 5);\n  };\n\n  const fetchImageDataChron = async () => {\n    let startDateEndDateStrings = helper_functions.getEndDateStartDate(nextAvailableDate);\n    let startDateString = startDateEndDateStrings[0];\n    let endDateString = startDateEndDateStrings[1];\n    let apiString = \"https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&start_date=\" + endDateString + \"&end_date=\" + startDateString;\n    fetchDataAbstract(apiString).then(new_data => imageDataHandler(new_data));\n    let nextDate = helper_functions.getNextDate(nextAvailableDate);\n    setNextAvailableDate(nextDate);\n  };\n\n  const fetchAdditionalDataChron = () => {\n    let startDateEndDateStrings = helper_functions.getEndDateStartDate(nextAvailableDate);\n    let startDateString = startDateEndDateStrings[0];\n    let endDateString = startDateEndDateStrings[1];\n    let apiString = \"https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&start_date=\" + endDateString + \"&end_date=\" + startDateString;\n    fetchDataAbstract(apiString).then(new_data => additionalImageDataHandler(new_data));\n    let nextDate = helper_functions.getNextDate(nextAvailableDate);\n    setNextAvailableDate(nextDate);\n  };\n\n  const fetchImageDataRandom = () => {\n    let apiString = 'https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&count=5';\n    fetchDataAbstract(apiString).then(new_data => imageDataHandler(new_data));\n  };\n\n  const fetchAdditionalDataRandom = () => {\n    let apiString = 'https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&count=5';\n    fetchDataAbstract(apiString).then(new_data => additionalImageDataHandler(new_data));\n  };\n\n  const imageDataHandler = data => {\n    if (viewMode == \"chronological\") {\n      data = data.reverse();\n    }\n\n    setImageData(data);\n    setImageDataLoaded(true);\n    props.onDataLoaded();\n  };\n\n  const additionalImageDataHandler = data => {\n    if (viewMode == \"chronological\") {\n      data = data.reverse();\n    }\n\n    const existingImageData = imageData;\n    const newArray = existingImageData.concat(data);\n    setImageData(newArray);\n    props.onExtraDataLoaded();\n  };\n\n  const savedImageDataHandler = data => {\n    setImageData(data);\n    setImageDataLoaded(true);\n    props.onDataLoaded();\n  };\n\n  const styleProps = {\n    \"backgroundColor\": \"#e1e1e1\",\n    \"paddingTop\": \"10px\",\n    \"paddingBottom\": \"20px\",\n    \"minHeight\": \"calc(100vh - 200px)\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styleProps,\n    children: imageDataLoaded ? imageData.map((item, index) => /*#__PURE__*/_jsxDEV(ImageCard, {\n      data: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 67\n    }, this)) : /*#__PURE__*/_jsxDEV(CustomProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 108\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ApplicationBody, \"DxLjwP34zR8qFZITgL0xrmvBm9I=\");\n\n_c = ApplicationBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplicationBody\");","map":{"version":3,"sources":["/Users/alexanderclements/Projects/spacestagram/src/functionalComponents/ApplicationBody.tsx"],"names":["React","useEffect","useState","ImageCard","getStorageItems","fetchDataAbstract","HelperFunctions","CustomProgress","fetchSavedData","ApplicationBody","props","helper_functions","imageData","setImageData","imageDataLoaded","setImageDataLoaded","viewMode","setViewMode","nextAvailableDate","setNextAvailableDate","Date","toString","currentSavedIndex","setCurrentSavedIndex","savedImageDates","setSavedImageDates","fetchImageDataRandom","fetchImageDataChron","fetchImageDataSaved","loadMoreData","fetchAdditionalDataRandom","fetchAdditionalDataChron","fetchAdditionalSavedImage","allDates","index","allDatesLength","length","myArray","i","push","then","data","savedImageDataHandler","onNoMoreData","additionalImageDataHandler","startDateEndDateStrings","getEndDateStartDate","startDateString","endDateString","apiString","new_data","imageDataHandler","nextDate","getNextDate","reverse","onDataLoaded","existingImageData","newArray","concat","onExtraDataLoaded","styleProps","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useEffect, useState} from 'react';\nimport ImageCard from './ImageCard';\nimport getStorageItems from '../scripts/getStorageItems';\nimport fetchDataAbstract from '../scripts/fetchDataAbstract';\nimport {HelperFunctions} from '../scripts/HelperFunctions';\nimport CustomProgress from './CustomProgress';\nimport fetchSavedData from '../scripts/fetchSavedData';\n\n\nexport default function ApplicationBody(props : any) {\n    let helper_functions : HelperFunctions = new HelperFunctions();\n\n\n    const [imageData, setImageData] = useState<Array<any>>([]);\n    const [imageDataLoaded, setImageDataLoaded] = useState(false);\n    const [viewMode, setViewMode] = useState(props.viewMode);\n    const [nextAvailableDate, setNextAvailableDate] = useState(new Date().toString())\n    const [currentSavedIndex, setCurrentSavedIndex] = useState(0);\n    const [savedImageDates, setSavedImageDates] = useState(getStorageItems());\n\n    useEffect(() => {\n        switch (viewMode) {\n            case \"random\": {\n                fetchImageDataRandom();\n                break;\n            }\n            case \"chronological\": {\n                fetchImageDataChron();\n                break;\n            }\n            case \"saved\": {\n                fetchImageDataSaved();\n                break;\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (props.loadMoreData) {\n            switch(viewMode) {\n                case \"random\": {\n                    fetchAdditionalDataRandom();\n                    break;\n                }\n                case \"chronological\": {\n                    fetchAdditionalDataChron();\n                    break;\n                }\n                case \"saved\": {\n                    fetchAdditionalSavedImage();\n                }\n            }\n        }\n    }, [props.loadMoreData]);\n\n    useEffect(() => {\n        setViewMode(props.viewMode);\n    }, [props.viewMode])\n\n    const fetchImageDataSaved = () => {\n        let allDates : Array<string> = savedImageDates;\n        let index : number = currentSavedIndex;\n        let allDatesLength = allDates.length;\n        let myArray : Array<string> = [];\n        var i : number;\n\n        for (i = index; i < index + 5; i++) {\n            if (i < allDatesLength) {\n                myArray.push(allDates[i])\n            }\n        }\n\n        fetchSavedData(myArray)\n        .then(data => savedImageDataHandler(data))\n        .then(() => {\n            if (i >= allDates.length) {\n                props.onNoMoreData();\n            }\n        })\n\n        setCurrentSavedIndex(index + 5);\n    }\n\n    const fetchAdditionalSavedImage = () => {\n        let allDates : Array<string> = savedImageDates;\n        let index : number = currentSavedIndex;\n        let allDatesLength = allDates.length;\n        let myArray : Array<string> = [];\n        var i : number;\n\n        for (i = index; i < index + 5; i++) {\n            if (i < allDatesLength) {\n                myArray.push(allDates[i])\n            }\n        }\n\n        fetchSavedData(myArray)\n        .then(data => additionalImageDataHandler(data))\n        .then(() => {\n            if (i >= allDates.length) {\n                props.onNoMoreData();\n            }\n        });\n        setCurrentSavedIndex(index + 5);\n        \n    }\n\n    const fetchImageDataChron = async () => {\n        let startDateEndDateStrings = helper_functions.getEndDateStartDate(nextAvailableDate);\n        let startDateString : string = startDateEndDateStrings[0];\n        let endDateString : string = startDateEndDateStrings[1];\n\n        let apiString = \"https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&start_date=\" + endDateString + \"&end_date=\" + startDateString;\n        fetchDataAbstract(apiString).then(new_data => imageDataHandler(new_data));\n\n        let nextDate : string = helper_functions.getNextDate(nextAvailableDate);\n        setNextAvailableDate(nextDate);\n    }\n\n    const fetchAdditionalDataChron = () => {\n        let startDateEndDateStrings = helper_functions.getEndDateStartDate(nextAvailableDate);\n        let startDateString : string = startDateEndDateStrings[0];\n        let endDateString : string = startDateEndDateStrings[1];\n\n        let apiString = \"https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&start_date=\" + endDateString + \"&end_date=\" + startDateString;\n        fetchDataAbstract(apiString).then(new_data => additionalImageDataHandler(new_data));\n\n        let nextDate : string = helper_functions.getNextDate(nextAvailableDate);\n        setNextAvailableDate(nextDate);\n    }\n\n    const fetchImageDataRandom = () => {\n        let apiString : string = 'https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&count=5';\n        fetchDataAbstract(apiString).then(new_data => imageDataHandler(new_data));\n    }\n\n    const fetchAdditionalDataRandom = () => {\n        let apiString : string = 'https://api.nasa.gov/planetary/apod?api_key=Bm1rwlnBAeqpKdnPnc5Qqke49sbZONaRPJvejW0O&count=5';\n        fetchDataAbstract(apiString).then(new_data => additionalImageDataHandler(new_data));\n    }\n\n    const imageDataHandler = (data : any) => {\n        if (viewMode == \"chronological\") {\n            data = data.reverse();\n        }\n        setImageData(data);\n        setImageDataLoaded(true);\n        props.onDataLoaded();\n    }\n\n    const additionalImageDataHandler = (data : any) => {\n        if (viewMode == \"chronological\") {\n            data = data.reverse();\n        }\n        const existingImageData = imageData;\n        const newArray = existingImageData.concat(data);\n        setImageData(newArray);\n        props.onExtraDataLoaded(); \n    }\n\n    const savedImageDataHandler = (data : any) => {\n        setImageData(data);\n        setImageDataLoaded(true);\n        props.onDataLoaded();\n    }\n\n    const styleProps = {\n        \"backgroundColor\": \"#e1e1e1\",\n        \"paddingTop\": \"10px\",\n        \"paddingBottom\": \"20px\",\n        \"minHeight\": \"calc(100vh - 200px)\",\n    }\n\n    return (\n        <div style={styleProps}>\n                {imageDataLoaded ? imageData.map((item, index) => <ImageCard data={item} key={index} />) : <CustomProgress />}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}